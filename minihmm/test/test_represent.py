#!/usr/bin/env python
"""
"""

import numpy
import itertools

from minihmm.represent import (
    transcode_sequences,
    get_state_mapping,
    #reduce_model_order,
    )

from nose.tools import (
    assert_equal,
    assert_true,
    assert_almost_equal,
    assert_dict_equal,
    assert_raises
    )


class TestGetStateMapping():

    @staticmethod
    def revdict(d):
        # make sure we won't overwrite entries
        vals = d.values()
        assert len(set(vals)) == len(vals)
        return { v : k for (k,v) in d.items() }

    @staticmethod
    def check_results(states, model_order, expected_htf, name):
        """Helper function to check forward and reverse dicts coming from :func:`get_state_mapping`

        Parameters
        ----------
        states : int
            Number of states in high-order model

        model_order : int
            Order of high-order model

        expected_htf : dict
            Dictionary mapping `model-order`-tuples of high-order states to
            their new first-order representations

        name : str
            Name of test
        """
        found_htf, found_fth = get_state_mapping(states,model_order)
        expected_fth = TestGetStateMapping.revdict(expected_htf)

        assert_dict_equal(expected_htf,found_htf)
        assert_dict_equal(expected_fth,found_fth)

    def test_bad_parameters_raises_value_error(self):
        for numstates, model_order in itertools.product([-1,0,5],[-2,-1,0]):
            assert_raises(ValueError,get_state_mapping,numstates,model_order)

    def test_first_order_is_identical(self):
        expected = {(0,): 0, (1,): 1, (2,): 2, (3,): 3}
        yield self.check_results, 4, 1, expected, "first order"

    def test_second_order(self):
        states = 4
        expected = {
            # created by adding new start state
            (-1, 0): 0,
            (-1, 1): 1,
            (-1, 2): 2,
            (-1, 3): 3,

            # created by adding additional end state
            (0, -2): 4,
            (1, -2): 5,
            (2, -2): 6,
            (3, -2): 7,

            # represented
            (0, 0) : 8,
            (0, 1) : 9,
            (0, 2) : 10,
            (0, 3) : 11,
            (1, 0) : 12,
            (1, 1) : 13,
            (1, 2) : 14,
            (1, 3) : 15,
            (2, 0) : 16,
            (2, 1) : 17,
            (2, 2) : 18,
            (2, 3) : 19,
            (3, 0) : 20,
            (3, 1) : 21,
            (3, 2) : 22,
            (3, 3) : 23,
        }
        yield self.check_results, states, 2, expected, "second order"


    def test_third_order(self):
        states = 4
        expected = {
            # created from new start and end states
            (-3, -1, 0): 0,
            (-3, -1, 1): 1,
            (-3, -1, 2): 2,
            (-3, -1, 3): 3,
            (0, -2, -4): 4,
            (1, -2, -4): 5,
            (2, -2, -4): 6,
            (3, -2, -4): 7,
            (-1, 0, 0): 8,
            (-1, 0, 1): 9,

            (-1, 0, 2): 10,
            (-1, 0, 3): 11,
            (-1, 1, 0): 12,
            (-1, 1, 1): 13,
            (-1, 1, 2): 14,
            (-1, 1, 3): 15,
            (-1, 2, 0): 16,
            (-1, 2, 1): 17,
            (-1, 2, 2): 18,
            (-1, 2, 3): 19,

            (-1, 3, 0): 20,
            (-1, 3, 1): 21,
            (-1, 3, 2): 22,
            (-1, 3, 3): 23,
            (0, 0, -2): 24,
            (0, 1, -2): 25,
            (0, 2, -2): 26,
            (0, 3, -2): 27,
            (1, 0, -2): 28,
            (1, 1, -2): 29,

            (1, 2, -2): 30,
            (1, 3, -2): 31,
            (2, 0, -2): 32,
            (2, 1, -2): 33,
            (2, 2, -2): 34,
            (2, 3, -2): 35,
            (3, 0, -2): 36,
            (3, 1, -2): 37,
            (3, 2, -2): 38,
            (3, 3, -2): 39,

            # acutal states
            (0, 0, 0): 40,
            (0, 0, 1): 41,
            (0, 0, 2): 42,
            (0, 0, 3): 43,
            (0, 1, 0): 44,
            (0, 1, 1): 45,
            (0, 1, 2): 46,
            (0, 1, 3): 47,
            (0, 2, 0): 48,
            (0, 2, 1): 49,

            (0, 2, 2): 50,
            (0, 2, 3): 51,
            (0, 3, 0): 52,
            (0, 3, 1): 53,
            (0, 3, 2): 54,
            (0, 3, 3): 55,
            (1, 0, 0): 56,
            (1, 0, 1): 57,
            (1, 0, 2): 58,
            (1, 0, 3): 59,

            (1, 1, 0): 60,
            (1, 1, 1): 61,
            (1, 1, 2): 62,
            (1, 1, 3): 63,
            (1, 2, 0): 64,
            (1, 2, 1): 65,
            (1, 2, 2): 66,
            (1, 2, 3): 67,
            (1, 3, 0): 68,
            (1, 3, 1): 69,

            (1, 3, 2): 70,
            (1, 3, 3): 71,
            (2, 0, 0): 72,
            (2, 0, 1): 73,
            (2, 0, 2): 74,
            (2, 0, 3): 75,
            (2, 1, 0): 76,
            (2, 1, 1): 77,
            (2, 1, 2): 78,
            (2, 1, 3): 79,

            (2, 2, 0): 80,
            (2, 2, 1): 81,
            (2, 2, 2): 82,
            (2, 2, 3): 83,
            (2, 3, 0): 84,
            (2, 3, 1): 85,
            (2, 3, 2): 86,
            (2, 3, 3): 87,
            (3, 0, 0): 88,
            (3, 0, 1): 89,

            (3, 0, 2): 90,
            (3, 0, 3): 91,
            (3, 1, 0): 92,
            (3, 1, 1): 93,
            (3, 1, 2): 94,
            (3, 1, 3): 95,
            (3, 2, 0): 96,
            (3, 2, 1): 97,
            (3, 2, 2): 98,
            (3, 2, 3): 99,

            (3, 3, 0): 100,
            (3, 3, 1): 101,
            (3, 3, 2): 102,
            (3, 3, 3): 103
        }
        yield self.check_results, states, 3, expected, "third order"

    def test_fourth_order(self):
        states = 4
        expected = {
            (-5, -3, -1, 0): 0,
            (-5, -3, -1, 1): 1,
            (-5, -3, -1, 2): 2,
            (-5, -3, -1, 3): 3,
            (-3, -1, 0, 0): 8,
            (-3, -1, 0, 1): 9,
            (-3, -1, 0, 2): 10,
            (-3, -1, 0, 3): 11,
            (-3, -1, 1, 0): 12,
            (-3, -1, 1, 1): 13,
            (-3, -1, 1, 2): 14,
            (-3, -1, 1, 3): 15,
            (-3, -1, 2, 0): 16,
            (-3, -1, 2, 1): 17,
            (-3, -1, 2, 2): 18,
            (-3, -1, 2, 3): 19,
            (-3, -1, 3, 0): 20,
            (-3, -1, 3, 1): 21,
            (-3, -1, 3, 2): 22,
            (-3, -1, 3, 3): 23,
            (-1, 0, 0, 0): 40,
            (-1, 0, 0, 1): 41,
            (-1, 0, 0, 2): 42,
            (-1, 0, 0, 3): 43,
            (-1, 0, 1, 0): 44,
            (-1, 0, 1, 1): 45,
            (-1, 0, 1, 2): 46,
            (-1, 0, 1, 3): 47,
            (-1, 0, 2, 0): 48,
            (-1, 0, 2, 1): 49,
            (-1, 0, 2, 2): 50,
            (-1, 0, 2, 3): 51,
            (-1, 0, 3, 0): 52,
            (-1, 0, 3, 1): 53,
            (-1, 0, 3, 2): 54,
            (-1, 0, 3, 3): 55,
            (-1, 1, 0, 0): 56,
            (-1, 1, 0, 1): 57,
            (-1, 1, 0, 2): 58,
            (-1, 1, 0, 3): 59,
            (-1, 1, 1, 0): 60,
            (-1, 1, 1, 1): 61,
            (-1, 1, 1, 2): 62,
            (-1, 1, 1, 3): 63,
            (-1, 1, 2, 0): 64,
            (-1, 1, 2, 1): 65,
            (-1, 1, 2, 2): 66,
            (-1, 1, 2, 3): 67,
            (-1, 1, 3, 0): 68,
            (-1, 1, 3, 1): 69,
            (-1, 1, 3, 2): 70,
            (-1, 1, 3, 3): 71,
            (-1, 2, 0, 0): 72,
            (-1, 2, 0, 1): 73,
            (-1, 2, 0, 2): 74,
            (-1, 2, 0, 3): 75,
            (-1, 2, 1, 0): 76,
            (-1, 2, 1, 1): 77,
            (-1, 2, 1, 2): 78,
            (-1, 2, 1, 3): 79,
            (-1, 2, 2, 0): 80,
            (-1, 2, 2, 1): 81,
            (-1, 2, 2, 2): 82,
            (-1, 2, 2, 3): 83,
            (-1, 2, 3, 0): 84,
            (-1, 2, 3, 1): 85,
            (-1, 2, 3, 2): 86,
            (-1, 2, 3, 3): 87,
            (-1, 3, 0, 0): 88,
            (-1, 3, 0, 1): 89,
            (-1, 3, 0, 2): 90,
            (-1, 3, 0, 3): 91,
            (-1, 3, 1, 0): 92,
            (-1, 3, 1, 1): 93,
            (-1, 3, 1, 2): 94,
            (-1, 3, 1, 3): 95,
            (-1, 3, 2, 0): 96,
            (-1, 3, 2, 1): 97,
            (-1, 3, 2, 2): 98,
            (-1, 3, 2, 3): 99,
            (-1, 3, 3, 0): 100,
            (-1, 3, 3, 1): 101,
            (-1, 3, 3, 2): 102,
            (-1, 3, 3, 3): 103,
            (0, -2, -4, -6): 4,
            (0, 0, -2, -4): 24,
            (0, 0, 0, -2): 104,
            (0, 0, 0, 0): 168,
            (0, 0, 0, 1): 169,
            (0, 0, 0, 2): 170,
            (0, 0, 0, 3): 171,
            (0, 0, 1, -2): 105,
            (0, 0, 1, 0): 172,
            (0, 0, 1, 1): 173,
            (0, 0, 1, 2): 174,
            (0, 0, 1, 3): 175,
            (0, 0, 2, -2): 106,
            (0, 0, 2, 0): 176,
            (0, 0, 2, 1): 177,
            (0, 0, 2, 2): 178,
            (0, 0, 2, 3): 179,
            (0, 0, 3, -2): 107,
            (0, 0, 3, 0): 180,
            (0, 0, 3, 1): 181,
            (0, 0, 3, 2): 182,
            (0, 0, 3, 3): 183,
            (0, 1, -2, -4): 25,
            (0, 1, 0, -2): 108,
            (0, 1, 0, 0): 184,
            (0, 1, 0, 1): 185,
            (0, 1, 0, 2): 186,
            (0, 1, 0, 3): 187,
            (0, 1, 1, -2): 109,
            (0, 1, 1, 0): 188,
            (0, 1, 1, 1): 189,
            (0, 1, 1, 2): 190,
            (0, 1, 1, 3): 191,
            (0, 1, 2, -2): 110,
            (0, 1, 2, 0): 192,
            (0, 1, 2, 1): 193,
            (0, 1, 2, 2): 194,
            (0, 1, 2, 3): 195,
            (0, 1, 3, -2): 111,
            (0, 1, 3, 0): 196,
            (0, 1, 3, 1): 197,
            (0, 1, 3, 2): 198,
            (0, 1, 3, 3): 199,
            (0, 2, -2, -4): 26,
            (0, 2, 0, -2): 112,
            (0, 2, 0, 0): 200,
            (0, 2, 0, 1): 201,
            (0, 2, 0, 2): 202,
            (0, 2, 0, 3): 203,
            (0, 2, 1, -2): 113,
            (0, 2, 1, 0): 204,
            (0, 2, 1, 1): 205,
            (0, 2, 1, 2): 206,
            (0, 2, 1, 3): 207,
            (0, 2, 2, -2): 114,
            (0, 2, 2, 0): 208,
            (0, 2, 2, 1): 209,
            (0, 2, 2, 2): 210,
            (0, 2, 2, 3): 211,
            (0, 2, 3, -2): 115,
            (0, 2, 3, 0): 212,
            (0, 2, 3, 1): 213,
            (0, 2, 3, 2): 214,
            (0, 2, 3, 3): 215,
            (0, 3, -2, -4): 27,
            (0, 3, 0, -2): 116,
            (0, 3, 0, 0): 216,
            (0, 3, 0, 1): 217,
            (0, 3, 0, 2): 218,
            (0, 3, 0, 3): 219,
            (0, 3, 1, -2): 117,
            (0, 3, 1, 0): 220,
            (0, 3, 1, 1): 221,
            (0, 3, 1, 2): 222,
            (0, 3, 1, 3): 223,
            (0, 3, 2, -2): 118,
            (0, 3, 2, 0): 224,
            (0, 3, 2, 1): 225,
            (0, 3, 2, 2): 226,
            (0, 3, 2, 3): 227,
            (0, 3, 3, -2): 119,
            (0, 3, 3, 0): 228,
            (0, 3, 3, 1): 229,
            (0, 3, 3, 2): 230,
            (0, 3, 3, 3): 231,
            (1, -2, -4, -6): 5,
            (1, 0, -2, -4): 28,
            (1, 0, 0, -2): 120,
            (1, 0, 0, 0): 232,
            (1, 0, 0, 1): 233,
            (1, 0, 0, 2): 234,
            (1, 0, 0, 3): 235,
            (1, 0, 1, -2): 121,
            (1, 0, 1, 0): 236,
            (1, 0, 1, 1): 237,
            (1, 0, 1, 2): 238,
            (1, 0, 1, 3): 239,
            (1, 0, 2, -2): 122,
            (1, 0, 2, 0): 240,
            (1, 0, 2, 1): 241,
            (1, 0, 2, 2): 242,
            (1, 0, 2, 3): 243,
            (1, 0, 3, -2): 123,
            (1, 0, 3, 0): 244,
            (1, 0, 3, 1): 245,
            (1, 0, 3, 2): 246,
            (1, 0, 3, 3): 247,
            (1, 1, -2, -4): 29,
            (1, 1, 0, -2): 124,
            (1, 1, 0, 0): 248,
            (1, 1, 0, 1): 249,
            (1, 1, 0, 2): 250,
            (1, 1, 0, 3): 251,
            (1, 1, 1, -2): 125,
            (1, 1, 1, 0): 252,
            (1, 1, 1, 1): 253,
            (1, 1, 1, 2): 254,
            (1, 1, 1, 3): 255,
            (1, 1, 2, -2): 126,
            (1, 1, 2, 0): 256,
            (1, 1, 2, 1): 257,
            (1, 1, 2, 2): 258,
            (1, 1, 2, 3): 259,
            (1, 1, 3, -2): 127,
            (1, 1, 3, 0): 260,
            (1, 1, 3, 1): 261,
            (1, 1, 3, 2): 262,
            (1, 1, 3, 3): 263,
            (1, 2, -2, -4): 30,
            (1, 2, 0, -2): 128,
            (1, 2, 0, 0): 264,
            (1, 2, 0, 1): 265,
            (1, 2, 0, 2): 266,
            (1, 2, 0, 3): 267,
            (1, 2, 1, -2): 129,
            (1, 2, 1, 0): 268,
            (1, 2, 1, 1): 269,
            (1, 2, 1, 2): 270,
            (1, 2, 1, 3): 271,
            (1, 2, 2, -2): 130,
            (1, 2, 2, 0): 272,
            (1, 2, 2, 1): 273,
            (1, 2, 2, 2): 274,
            (1, 2, 2, 3): 275,
            (1, 2, 3, -2): 131,
            (1, 2, 3, 0): 276,
            (1, 2, 3, 1): 277,
            (1, 2, 3, 2): 278,
            (1, 2, 3, 3): 279,
            (1, 3, -2, -4): 31,
            (1, 3, 0, -2): 132,
            (1, 3, 0, 0): 280,
            (1, 3, 0, 1): 281,
            (1, 3, 0, 2): 282,
            (1, 3, 0, 3): 283,
            (1, 3, 1, -2): 133,
            (1, 3, 1, 0): 284,
            (1, 3, 1, 1): 285,
            (1, 3, 1, 2): 286,
            (1, 3, 1, 3): 287,
            (1, 3, 2, -2): 134,
            (1, 3, 2, 0): 288,
            (1, 3, 2, 1): 289,
            (1, 3, 2, 2): 290,
            (1, 3, 2, 3): 291,
            (1, 3, 3, -2): 135,
            (1, 3, 3, 0): 292,
            (1, 3, 3, 1): 293,
            (1, 3, 3, 2): 294,
            (1, 3, 3, 3): 295,
            (2, -2, -4, -6): 6,
            (2, 0, -2, -4): 32,
            (2, 0, 0, -2): 136,
            (2, 0, 0, 0): 296,
            (2, 0, 0, 1): 297,
            (2, 0, 0, 2): 298,
            (2, 0, 0, 3): 299,
            (2, 0, 1, -2): 137,
            (2, 0, 1, 0): 300,
            (2, 0, 1, 1): 301,
            (2, 0, 1, 2): 302,
            (2, 0, 1, 3): 303,
            (2, 0, 2, -2): 138,
            (2, 0, 2, 0): 304,
            (2, 0, 2, 1): 305,
            (2, 0, 2, 2): 306,
            (2, 0, 2, 3): 307,
            (2, 0, 3, -2): 139,
            (2, 0, 3, 0): 308,
            (2, 0, 3, 1): 309,
            (2, 0, 3, 2): 310,
            (2, 0, 3, 3): 311,
            (2, 1, -2, -4): 33,
            (2, 1, 0, -2): 140,
            (2, 1, 0, 0): 312,
            (2, 1, 0, 1): 313,
            (2, 1, 0, 2): 314,
            (2, 1, 0, 3): 315,
            (2, 1, 1, -2): 141,
            (2, 1, 1, 0): 316,
            (2, 1, 1, 1): 317,
            (2, 1, 1, 2): 318,
            (2, 1, 1, 3): 319,
            (2, 1, 2, -2): 142,
            (2, 1, 2, 0): 320,
            (2, 1, 2, 1): 321,
            (2, 1, 2, 2): 322,
            (2, 1, 2, 3): 323,
            (2, 1, 3, -2): 143,
            (2, 1, 3, 0): 324,
            (2, 1, 3, 1): 325,
            (2, 1, 3, 2): 326,
            (2, 1, 3, 3): 327,
            (2, 2, -2, -4): 34,
            (2, 2, 0, -2): 144,
            (2, 2, 0, 0): 328,
            (2, 2, 0, 1): 329,
            (2, 2, 0, 2): 330,
            (2, 2, 0, 3): 331,
            (2, 2, 1, -2): 145,
            (2, 2, 1, 0): 332,
            (2, 2, 1, 1): 333,
            (2, 2, 1, 2): 334,
            (2, 2, 1, 3): 335,
            (2, 2, 2, -2): 146,
            (2, 2, 2, 0): 336,
            (2, 2, 2, 1): 337,
            (2, 2, 2, 2): 338,
            (2, 2, 2, 3): 339,
            (2, 2, 3, -2): 147,
            (2, 2, 3, 0): 340,
            (2, 2, 3, 1): 341,
            (2, 2, 3, 2): 342,
            (2, 2, 3, 3): 343,
            (2, 3, -2, -4): 35,
            (2, 3, 0, -2): 148,
            (2, 3, 0, 0): 344,
            (2, 3, 0, 1): 345,
            (2, 3, 0, 2): 346,
            (2, 3, 0, 3): 347,
            (2, 3, 1, -2): 149,
            (2, 3, 1, 0): 348,
            (2, 3, 1, 1): 349,
            (2, 3, 1, 2): 350,
            (2, 3, 1, 3): 351,
            (2, 3, 2, -2): 150,
            (2, 3, 2, 0): 352,
            (2, 3, 2, 1): 353,
            (2, 3, 2, 2): 354,
            (2, 3, 2, 3): 355,
            (2, 3, 3, -2): 151,
            (2, 3, 3, 0): 356,
            (2, 3, 3, 1): 357,
            (2, 3, 3, 2): 358,
            (2, 3, 3, 3): 359,
            (3, -2, -4, -6): 7,
            (3, 0, -2, -4): 36,
            (3, 0, 0, -2): 152,
            (3, 0, 0, 0): 360,
            (3, 0, 0, 1): 361,
            (3, 0, 0, 2): 362,
            (3, 0, 0, 3): 363,
            (3, 0, 1, -2): 153,
            (3, 0, 1, 0): 364,
            (3, 0, 1, 1): 365,
            (3, 0, 1, 2): 366,
            (3, 0, 1, 3): 367,
            (3, 0, 2, -2): 154,
            (3, 0, 2, 0): 368,
            (3, 0, 2, 1): 369,
            (3, 0, 2, 2): 370,
            (3, 0, 2, 3): 371,
            (3, 0, 3, -2): 155,
            (3, 0, 3, 0): 372,
            (3, 0, 3, 1): 373,
            (3, 0, 3, 2): 374,
            (3, 0, 3, 3): 375,
            (3, 1, -2, -4): 37,
            (3, 1, 0, -2): 156,
            (3, 1, 0, 0): 376,
            (3, 1, 0, 1): 377,
            (3, 1, 0, 2): 378,
            (3, 1, 0, 3): 379,
            (3, 1, 1, -2): 157,
            (3, 1, 1, 0): 380,
            (3, 1, 1, 1): 381,
            (3, 1, 1, 2): 382,
            (3, 1, 1, 3): 383,
            (3, 1, 2, -2): 158,
            (3, 1, 2, 0): 384,
            (3, 1, 2, 1): 385,
            (3, 1, 2, 2): 386,
            (3, 1, 2, 3): 387,
            (3, 1, 3, -2): 159,
            (3, 1, 3, 0): 388,
            (3, 1, 3, 1): 389,
            (3, 1, 3, 2): 390,
            (3, 1, 3, 3): 391,
            (3, 2, -2, -4): 38,
            (3, 2, 0, -2): 160,
            (3, 2, 0, 0): 392,
            (3, 2, 0, 1): 393,
            (3, 2, 0, 2): 394,
            (3, 2, 0, 3): 395,
            (3, 2, 1, -2): 161,
            (3, 2, 1, 0): 396,
            (3, 2, 1, 1): 397,
            (3, 2, 1, 2): 398,
            (3, 2, 1, 3): 399,
            (3, 2, 2, -2): 162,
            (3, 2, 2, 0): 400,
            (3, 2, 2, 1): 401,
            (3, 2, 2, 2): 402,
            (3, 2, 2, 3): 403,
            (3, 2, 3, -2): 163,
            (3, 2, 3, 0): 404,
            (3, 2, 3, 1): 405,
            (3, 2, 3, 2): 406,
            (3, 2, 3, 3): 407,
            (3, 3, -2, -4): 39,
            (3, 3, 0, -2): 164,
            (3, 3, 0, 0): 408,
            (3, 3, 0, 1): 409,
            (3, 3, 0, 2): 410,
            (3, 3, 0, 3): 411,
            (3, 3, 1, -2): 165,
            (3, 3, 1, 0): 412,
            (3, 3, 1, 1): 413,
            (3, 3, 1, 2): 414,
            (3, 3, 1, 3): 415,
            (3, 3, 2, -2): 166,
            (3, 3, 2, 0): 416,
            (3, 3, 2, 1): 417,
            (3, 3, 2, 2): 418,
            (3, 3, 2, 3): 419,
            (3, 3, 3, -2): 167,
            (3, 3, 3, 0): 420,
            (3, 3, 3, 1): 421,
            (3, 3, 3, 2): 422,
            (3, 3, 3, 3): 423
        }
        yield self.check_results, states, 4, expected, "fourth order"


def test_transcode_sequences():
    assert False

